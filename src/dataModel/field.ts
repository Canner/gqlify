import { GraphqlType, isScalarType } from './type';
import { defaultTo } from 'lodash';

export default class Field {
  protected name: string;
  protected type: GraphqlType;

  // type related fields
  protected nonNull: boolean;
  protected list: boolean;
  protected nonNullItem: boolean;

  // data related fields
  protected unique: boolean;
  protected readOnly: boolean;
  protected autoGen: boolean;

  // other metadata
  protected metadata: Record<string, any> = {};

  constructor({
    name,
    type,
    nonNull,
    list,
    nonNullItem,
    unique,
    readOnly,
    autoGen,
  }: {
    name: string,
    type: GraphqlType,
    nonNull?: boolean,
    list?: boolean,
    nonNullItem?: boolean,
    unique?: boolean,
    readOnly?: boolean,
    autoGen?: boolean,
  }) {
    this.name = name;
    this.type = type;
    this.nonNull = defaultTo(nonNull, false);
    this.list = defaultTo(list, false);
    this.nonNullItem = defaultTo(nonNullItem, false);
    this.unique = defaultTo(unique, false);
    this.readOnly = defaultTo(readOnly, false);
    this.autoGen = defaultTo(autoGen, false);
  }

  public isNonNull() {
    return this.nonNull;
  }

  public setNonNull(value: boolean) {
    this.nonNull = value;
  }

  public isNonNullItem() {
    return this.nonNullItem;
  }

  public setNonNullItem(value: boolean) {
    this.nonNullItem = value;
  }

  public isList() {
    return this.list;
  }

  public setList(value: boolean) {
    this.list = value;
  }

  public setUnique(value: boolean) {
    this.unique = value;
  }

  public isUnique() {
    return this.unique;
  }

  public isReadOnly() {
    return this.readOnly;
  }

  public setReadOnly(value: boolean) {
    this.readOnly = value;
  }

  public isAutoGenerated() {
    return this.autoGen;
  }

  public setAutoGen(value: boolean) {
    this.autoGen = value;
  }

  public getName() {
    return this.name;
  }

  public getType() {
    return this.type;
  }

  public isScalar() {
    return isScalarType(this.type);
  }

  public getTypename() {
    return this.type.toString();
  }

  public stringifyAsField() {
    let value = this.getTypename();

    if (this.isList()) {
      value = this.isNonNullItem() ? `[${value}!]` : `[${value}]`;
    }

    if (this.isNonNull()) {
      value = `${value}!`;
    }
    return `${this.getName()}: ${value}`;
  }

  public getMetadata(key: string) {
    return this.metadata[key];
  }

  public setMetadata(key: string, value: any) {
    return this.metadata[key] = value;
  }
}
