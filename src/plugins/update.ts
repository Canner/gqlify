import Model from '../dataModel/model';
import { Context, Plugin } from './interface';
import WhereInputPlugin from './whereInput';
import BaseTypePlugin from './baseType';
import ObjectField from '../dataModel/objectField';
import { upperCase } from 'lodash';

const createObjectInputField = (prefix: string, field: ObjectField, context: Context) => {
  const { root } = context;
  const content: string[] = [];
  field.getFields().forEach(nestedField => {
    if (field.isScalar()) {
      content.push(`${nestedField.getName()}: ${field.getTypename()}`);
      return;
    }

    if (nestedField instanceof ObjectField) {
      const fieldWithPrefix = `${prefix}${upperCase(nestedField.getName())}`;
      const typeFields = createObjectInputField(fieldWithPrefix, nestedField, context);
      const objectInputName = `${fieldWithPrefix}UpdateInput`;
      root.addInput(objectInputName, `input ${objectInputName} {${typeFields.join(' ')}}`);
      content.push(`${nestedField.getName()}: ${objectInputName}`);
      return;
    }

    // skip relation field
  });
  return content;
};

const createInputField = (model: Model, context) => {
  const { root } = context;
  const fields = model.getFields();
  const content: string[] = [];
  fields.forEach(field => {
    if (field.isAutoGenerated()) {
      return;
    }

    if (field.isScalar()) {
      content.push(`${field.getName()}: ${field.getTypename()}`);
      return;
    }

    if (field instanceof ObjectField) {
      // create input for nested object
      const fieldWithPrefix = `${model.getNamings().capitalSingular}${upperCase(field.getName())}`;
      const typeFields = createObjectInputField(fieldWithPrefix, field, context);
      const objectInputName = `${fieldWithPrefix}UpdateInput`;
      root.addInput(objectInputName, `input ${objectInputName} {${typeFields.join(' ')}}`);
      content.push(`${field.getName()}: ${field.getTypename()}`);
      return;
    }

    // todo: add relation
  });

  return content;
};

export default class UpdatePlugin implements Plugin {
  private whereInputPlugin: WhereInputPlugin;
  private baseTypePlugin: BaseTypePlugin;

  public setPlugins(plugins: Plugin[]) {
    this.whereInputPlugin = plugins.find(
      plugin => plugin instanceof WhereInputPlugin) as WhereInputPlugin;
    this.baseTypePlugin = plugins.find(
      plugin => plugin instanceof BaseTypePlugin) as BaseTypePlugin;
  }

  public visitModel(model: Model, context: Context) {
    const { root } = context;
    const modelType = this.baseTypePlugin.getTypename(model);

    // update
    const mutationName = `update${model.getNamings().capitalSingular}`;
    const inputName = this.generateUpdateInput(model, context);
    const whereUniqueInput = this.whereInputPlugin.getWhereUniqueInputName(model);
    root.addMutation(mutationName, `${mutationName}(where: ${whereUniqueInput}, data: ${inputName}!): ${modelType}`);
  }

  private generateUpdateInput(model: Model, context: Context) {
    const inputName = `Update${model.getNamings().capitalSingular}Input`;
    const input = `input ${inputName} {
      ${createInputField(model, context)}
    }`;
    context.root.addInput(inputName, input);
    return inputName;
  }
}
